#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import os
import sys

import dns.resolver
from termcolor import colored

# Colors to use for PASS, FAIL, UNAVAILABLE, and DISABLED
PASS = colored("PASS", "green")
FAIL = colored("FAIL", "red")
UNAVAILABLE = colored("UNAVAILABLE", "yellow")
DISABLED = colored("DISABLED", "dark_grey")

# Initialize option variables
IPV4_ENABLED = True
IPV6_ENABLED = False

# DNS servers to check
DNS_SERVERS = {
    "Cthugha": {
        "IPv4": "165.227.83.145",
        "IPv4 Redirect": "165.227.83.145",
        "IPv6": "2604:a880:400:d0::aa1:7001",
        "IPv6 Redirect": "2604:a880:400:d0::aa1:7001",
    },
    "Ithaqua": {
        "IPv4": "192.241.221.79",
        "IPv4 Redirect": "192.241.221.79",
        "IPv6": "2604:a880:1:20::58:c001",
        "IPv6 Redirect": "2604:a880:1:20::58:c001",
    },
}

# Domains to check
DOMAINS = {
    "Redirect": {
        "Landing Domains": [
            "ctest.cdn.nintendo.net",
            "conntest.nintendowifi.net",
            "cfh.wapp.wii.com",
            "www.playstation.com",
            "manuals.playstation.net",
        ],
        "Network Test Domains": [
            "get.net.playstation.net",
            "post.net.playstation.net",
            "ena.net.playstation.net",
        ],
        "Generic Update Domains": [
            "update.net.playstation.net",
        ],
        "PS3 Update PUP Domains": [
            "djp01.ps3.update.playstation.net",
            "dus01.ps3.update.playstation.net",
            "deu01.ps3.update.playstation.net",
            "dkr01.ps3.update.playstation.net",
            "duk01.ps3.update.playstation.net",
            "dmx01.ps3.update.playstation.net",
            "dau01.ps3.update.playstation.net",
            "dsa01.ps3.update.playstation.net",
            "dtw01.ps3.update.playstation.net",
            "dru01.ps3.update.playstation.net",
            "dcn01.ps3.update.playstation.net",
            "dhk01.ps3.update.playstation.net",
            "dbr01.ps3.update.playstation.net",
        ],
        "PS4 Update PUP Domains": [
            "djp01.ps4.update.playstation.net",
            "dus01.ps4.update.playstation.net",
            "deu01.ps4.update.playstation.net",
            "dkr01.ps4.update.playstation.net",
            "duk01.ps4.update.playstation.net",
            "dmx01.ps4.update.playstation.net",
            "dau01.ps4.update.playstation.net",
            "dsa01.ps4.update.playstation.net",
            "dtw01.ps4.update.playstation.net",
            "dru01.ps4.update.playstation.net",
            "dcn01.ps4.update.playstation.net",
            "dhk01.ps4.update.playstation.net",
            "dbr01.ps4.update.playstation.net",
        ],
        "PS5 Update PUP Domains": [
            "djp01.ps5.update.playstation.net",
            "dus01.ps5.update.playstation.net",
            "deu01.ps5.update.playstation.net",
            "dkr01.ps5.update.playstation.net",
            "duk01.ps5.update.playstation.net",
            "dmx01.ps5.update.playstation.net",
            "dau01.ps5.update.playstation.net",
            "dsa01.ps5.update.playstation.net",
            "dtw01.ps5.update.playstation.net",
            "dru01.ps5.update.playstation.net",
            "dcn01.ps5.update.playstation.net",
            "dhk01.ps5.update.playstation.net",
            "dbr01.ps5.update.playstation.net",
        ],
        "Vita Update PUP Domains": [
            "djp01.psp2.update.playstation.net",
            "dus01.psp2.update.playstation.net",
            "deu01.psp2.update.playstation.net",
            "dkr01.psp2.update.playstation.net",
            "duk01.psp2.update.playstation.net",
            "dmx01.psp2.update.playstation.net",
            "dau01.psp2.update.playstation.net",
            "dsa01.psp2.update.playstation.net",
            "dtw01.psp2.update.playstation.net",
            "dru01.psp2.update.playstation.net",
            "dcn01.psp2.update.playstation.net",
            "dhk01.psp2.update.playstation.net",
            "dbr01.psp2.update.playstation.net",
        ],
        "PS3 Update List Domains": [
            "fjp01.ps3.update.playstation.net",
            "fus01.ps3.update.playstation.net",
            "feu01.ps3.update.playstation.net",
            "fkr01.ps3.update.playstation.net",
            "fuk01.ps3.update.playstation.net",
            "fmx01.ps3.update.playstation.net",
            "fau01.ps3.update.playstation.net",
            "fsa01.ps3.update.playstation.net",
            "ftw01.ps3.update.playstation.net",
            "fru01.ps3.update.playstation.net",
            "fcn01.ps3.update.playstation.net",
            "fhk01.ps3.update.playstation.net",
            "fbr01.ps3.update.playstation.net",
        ],
        "PS4 Update List Domains": [
            "fjp01.ps4.update.playstation.net",
            "fus01.ps4.update.playstation.net",
            "feu01.ps4.update.playstation.net",
            "fkr01.ps4.update.playstation.net",
            "fuk01.ps4.update.playstation.net",
            "fmx01.ps4.update.playstation.net",
            "fau01.ps4.update.playstation.net",
            "fsa01.ps4.update.playstation.net",
            "ftw01.ps4.update.playstation.net",
            "fru01.ps4.update.playstation.net",
            "fcn01.ps4.update.playstation.net",
            "fhk01.ps4.update.playstation.net",
            "fbr01.ps4.update.playstation.net",
        ],
        "PS5 Update List Domains": [
            "fjp01.ps5.update.playstation.net",
            "fus01.ps5.update.playstation.net",
            "feu01.ps5.update.playstation.net",
            "fkr01.ps5.update.playstation.net",
            "fuk01.ps5.update.playstation.net",
            "fmx01.ps5.update.playstation.net",
            "fau01.ps5.update.playstation.net",
            "fsa01.ps5.update.playstation.net",
            "ftw01.ps5.update.playstation.net",
            "fru01.ps5.update.playstation.net",
            "fcn01.ps5.update.playstation.net",
            "fhk01.ps5.update.playstation.net",
            "fbr01.ps5.update.playstation.net",
        ],
        "Vita Update List Domains": [
            "fjp01.psp2.update.playstation.net",
            "fus01.psp2.update.playstation.net",
            "feu01.psp2.update.playstation.net",
            "fkr01.psp2.update.playstation.net",
            "fuk01.psp2.update.playstation.net",
            "fmx01.psp2.update.playstation.net",
            "fau01.psp2.update.playstation.net",
            "fsa01.psp2.update.playstation.net",
            "ftw01.psp2.update.playstation.net",
            "fru01.psp2.update.playstation.net",
            "fcn01.psp2.update.playstation.net",
            "fhk01.psp2.update.playstation.net",
            "fbr01.psp2.update.playstation.net",
        ],
        "PS4 Update Feature Domains": [
            "hjp01.ps4.update.playstation.net",
            "hus01.ps4.update.playstation.net",
            "heu01.ps4.update.playstation.net",
            "hkr01.ps4.update.playstation.net",
            "huk01.ps4.update.playstation.net",
            "hmx01.ps4.update.playstation.net",
            "hau01.ps4.update.playstation.net",
            "hsa01.ps4.update.playstation.net",
            "htw01.ps4.update.playstation.net",
            "hru01.ps4.update.playstation.net",
            "hcn01.ps4.update.playstation.net",
            "hhk01.ps4.update.playstation.net",
            "hbr01.ps4.update.playstation.net",
        ],
        "PS5 Update Feature Domains": [
            "hjp01.ps5.update.playstation.net",
            "hus01.ps5.update.playstation.net",
            "heu01.ps5.update.playstation.net",
            "hkr01.ps5.update.playstation.net",
            "huk01.ps5.update.playstation.net",
            "hmx01.ps5.update.playstation.net",
            "hau01.ps5.update.playstation.net",
            "hsa01.ps5.update.playstation.net",
            "htw01.ps5.update.playstation.net",
            "hru01.ps5.update.playstation.net",
            "hcn01.ps5.update.playstation.net",
            "hhk01.ps5.update.playstation.net",
            "hbr01.ps5.update.playstation.net",
        ],
    },
    "Block": [
        "nintendo.net",
        "nintendowifi.net",
        "wii.com",
        "playstation.com",
        "playstation.net",

        "wildcard.nintendo.net",
        "wildcard.nintendowifi.net",
        "wildcard.wii.com",
        "wildcard.playstation.com",
        "wildcard.playstation.net",

        "nintendo-europe.com",
        "nintendo.at",
        "nintendo.be",
        "nintendo.ch",
        "nintendo.co.jp",
        "nintendo.co.kr",
        "nintendo.co.nz",
        "nintendo.co.uk",
        "nintendo.co.za",
        "nintendo.com",
        "nintendo.com.au",
        "nintendo.com.hk",
        "nintendo.cz",
        "nintendo.de",
        "nintendo.dk",
        "nintendo.es",
        "nintendo.eu",
        "nintendo.fi",
        "nintendo.fr",
        "nintendo.gr",
        "nintendo.hu",
        "nintendo.it",
        "nintendo.jp",
        "nintendo.nl",
        "nintendo.no",
        "nintendo.pt",
        "nintendo.ru",
        "nintendo.se",
        "nintendo.tw",
        "nintendoswitch.cn",
        "nintendoswitch.com",
        "nintendoswitch.com.cn",
        "nintendoservicecentre.co.uk",

        "playstation.org",
        "scea.com",
        "sonyentertainmentnetwork.com",
        "sie-rd.com",

        "wildcard.nintendo-europe.com",
        "wildcard.nintendo.at",
        "wildcard.nintendo.be",
        "wildcard.nintendo.ch",
        "wildcard.nintendo.co.jp",
        "wildcard.nintendo.co.kr",
        "wildcard.nintendo.co.nz",
        "wildcard.nintendo.co.uk",
        "wildcard.nintendo.co.za",
        "wildcard.nintendo.com",
        "wildcard.nintendo.com.au",
        "wildcard.nintendo.com.hk",
        "wildcard.nintendo.cz",
        "wildcard.nintendo.de",
        "wildcard.nintendo.dk",
        "wildcard.nintendo.es",
        "wildcard.nintendo.eu",
        "wildcard.nintendo.fi",
        "wildcard.nintendo.fr",
        "wildcard.nintendo.gr",
        "wildcard.nintendo.hu",
        "wildcard.nintendo.it",
        "wildcard.nintendo.jp",
        "wildcard.nintendo.nl",
        "wildcard.nintendo.no",
        "wildcard.nintendo.pt",
        "wildcard.nintendo.ru",
        "wildcard.nintendo.se",
        "wildcard.nintendo.tw",
        "wildcard.nintendoswitch.cn",
        "wildcard.nintendoswitch.com",
        "wildcard.nintendoswitch.com.cn",
        "wildcard.nintendoservicecentre.co.uk",

        "wildcard.playstation.org",
        "wildcard.scea.com",
        "wildcard.sonyentertainmentnetwork.com",
        "wildcard.sie-rd.com",
    ],
    "CNAME": {
        "b0.ww.np.dl.playstation.net": "sonycoment.vo.llnwd.net.",
        "gs.ww.np.dl.playstation.net": "sonycoment.vo.llnwd.net.",
        "gs2.ww.prod.dl.playstation.net": "sonycoment.vo.llnwd.net.",
        "gst.prod.dl.playstation.net": "sonygst.s.llnwi.net.",
    },
    "Forward": [
        "example.com",
        "www.google.com",
        "www.facebook.com",
        "www.wikipedia.org",
    ],
}

# Variables for loading bar
CHECKED = 0
TOTAL_CHECKS = len(DOMAINS["Block"]) + len(DOMAINS["CNAME"]) + len(DOMAINS["Forward"])
for key, value in DOMAINS["Redirect"].items():
    TOTAL_CHECKS += len(value)
TOTAL_CHECKS = TOTAL_CHECKS * len(DNS_SERVERS)


def clear_terminal():
    if os.name == "nt":
        os.system("cls")
    else:
        os.system("clear")


def update_progress():
    global CHECKED

    CHECKED += 1
    percent = int(CHECKED / TOTAL_CHECKS * 100)

    sys.stdout.write("\r")
    sys.stdout.write("[%-50s] %d%%" % ("=" * int(percent / 2), percent))
    sys.stdout.flush()


def redirect_check(entries, ipv4, ipv6, expected_ipv4, expected_ipv6):
    output = {}

    resolver_ipv4 = dns.resolver.Resolver()
    resolver_ipv6 = dns.resolver.Resolver()
    resolver_ipv4.nameservers = [ipv4]
    resolver_ipv6.nameservers = [ipv6]

    for entry in entries:
        output[entry] = {}

        if IPV4_ENABLED:
            found = 0
            output[entry]["IPv4"] = {"A": FAIL, "AAAA": FAIL}
            try:
                for rdata in resolver_ipv4.resolve(entry, "A"):
                    if str(rdata) == str(expected_ipv4):
                        output[entry]["IPv4"]["A"] = PASS
                    found += 1
                if found != 1:
                    output[entry]["IPv4"]["A"] = FAIL
            except:
                output[entry]["IPv4"]["A"] = FAIL

            found = 0
            try:
                for rdata in resolver_ipv4.resolve(entry, "AAAA"):
                    if str(rdata) == str(expected_ipv6):
                        output[entry]["IPv4"]["AAAA"] = PASS
                    found += 1
                if found != 1:
                    output[entry]["IPv4"]["AAAA"] = FAIL
            except:
                output[entry]["IPv4"]["AAAA"] = FAIL
        else:
            output[entry]["IPv4"] = DISABLED

        if IPV6_ENABLED:
            found = 0
            output[entry]["IPv6"] = {"A": FAIL, "AAAA": FAIL}
            try:
                for rdata in resolver_ipv6.resolve(entry, "A"):
                    if str(rdata) == str(expected_ipv4):
                        output[entry]["IPv6"]["A"] = PASS
                    found += 1
                if found != 1:
                    output[entry]["IPv6"]["A"] = FAIL
            except:
                output[entry]["IPv6"]["A"] = FAIL

            found = 0
            try:
                for rdata in resolver_ipv6.resolve(entry, "AAAA"):
                    if str(rdata) == str(expected_ipv6):
                        output[entry]["IPv6"]["AAAA"] = PASS
                    found += 1
                if found != 1:
                    output[entry]["IPv6"]["AAAA"] = FAIL
            except:
                output[entry]["IPv6"]["AAAA"] = FAIL
        else:
            output[entry]["IPv6"] = DISABLED

        update_progress()

    return output


def cname_check(entries, ipv4, ipv6):
    output = {}

    resolver_ipv4 = dns.resolver.Resolver()
    resolver_ipv6 = dns.resolver.Resolver()
    resolver_ipv4.nameservers = [ipv4]
    resolver_ipv6.nameservers = [ipv6]

    for key, value in entries.items():
        output[key] = {}

        if IPV4_ENABLED:
            found = 0
            output[key]["IPv4"] = FAIL
            try:
                for rdata in resolver_ipv4.resolve(key, "CNAME"):
                    if str(rdata) == str(value):
                        output[key]["IPv4"] = PASS
                    found += 1
                if found != 1:
                    output[key]["IPv4"] = FAIL
            except:
                output[key]["IPv4"] = FAIL
        else:
            output[key]["IPv4"] = DISABLED

        if IPV6_ENABLED:
            found = 0
            output[key]["IPv6"] = FAIL
            try:
                for rdata in resolver_ipv6.resolve(key, "CNAME"):
                    if str(rdata) == str(value):
                        output[key]["IPv6"] = PASS
                    found += 1
                if found != 1:
                    output[key]["IPv6"] = FAIL
            except:
                output[key]["IPv6"] = FAIL
        else:
            output[key]["IPv6"] = DISABLED

        update_progress()

    return output


def forward_check(entries, ipv4, ipv6):
    output = {}

    resolver_ipv4 = dns.resolver.Resolver()
    resolver_ipv6 = dns.resolver.Resolver()
    resolver_ipv4.nameservers = [ipv4]
    resolver_ipv6.nameservers = [ipv6]

    for entry in entries:
        output[entry] = {}

        if IPV4_ENABLED:
            output[entry]["IPv4"] = {"A": FAIL, "AAAA": FAIL}
            try:
                for rdata in resolver_ipv4.resolve(entry, "A"):
                    if str(rdata) != str(""):
                        output[entry]["IPv4"]["A"] = PASS
                        break
            except:
                output[entry]["IPv4"]["A"] = FAIL

            try:
                for rdata in resolver_ipv4.resolve(entry, "AAAA"):
                    if str(rdata) != str(""):
                        output[entry]["IPv4"]["AAAA"] = PASS
                        break
            except:
                output[entry]["IPv4"]["AAAA"] = FAIL
        else:
            output[entry]["IPv4"] = DISABLED

        if IPV6_ENABLED:
            output[entry]["IPv6"] = {"A": FAIL, "AAAA": FAIL}
            try:
                for rdata in resolver_ipv6.resolve(entry, "A"):
                    if str(rdata) != str(""):
                        output[entry]["IPv6"]["A"] = PASS
                        break
            except:
                output[entry]["IPv6"]["A"] = FAIL

            try:
                for rdata in resolver_ipv6.resolve(entry, "AAAA"):
                    if str(rdata) != str(""):
                        output[entry]["IPv6"]["AAAA"] = PASS
                        break
            except:
                output[entry]["IPv6"]["AAAA"] = FAIL
        else:
            output[entry]["IPv6"] = DISABLED

        update_progress()

    return output


def generate_data():
    output = {}

    for key, value in DNS_SERVERS.items():
        output[key] = {}
        output[key]["Redirect"] = {}
        for key2, value2 in DOMAINS["Redirect"].items():
            output[key]["Redirect"][key2] = redirect_check(value2, value["IPv4"], value["IPv6"], value["IPv4 Redirect"], value["IPv6 Redirect"])
        output[key]["Block"] = redirect_check(DOMAINS["Block"], value["IPv4"], value["IPv6"], "0.0.0.0", "::")  # nosec B104
        output[key]["CNAME"] = cname_check(DOMAINS["CNAME"], value["IPv4"], value["IPv6"])
        output[key]["Forward"] = forward_check(DOMAINS["Forward"], value["IPv4"], value["IPv6"])

    return output


def print_section_header(title, header_type=""):
    print(f"+--- {title} {''.ljust(80 - len(title), '-')}+")
    print("| DNS Protocol:                                         |     IPv4     |     IPv6     |")
    if header_type == "CNAME":
        print("| DNS Record Type:                                      |     CNAME    |     CNAME    |")
    else:
        print("| DNS Record Type:                                      |   A   | AAAA |   A   | AAAA |")
    print("| Domain(s):                                                                          |")


def print_section_footer():
    print("+-------------------------------------------------------------------------------------+")
    print("")


def print_section(data, server, section):
    if section == "Redirect":
        for key, value in data[server][section].items():
            print_section_header(str(server) + " " + str(section) + " " + str(key), str(section))
            for key2, value2 in data[server][section][key].items():
                if IPV4_ENABLED and not IPV6_ENABLED:
                    print(f"| {key2.ljust(54, ' ')}|  {value2['IPv4']['A']} | {value2['IPv4']['AAAA']} |   {value2['IPv6']}   |")
                elif not IPV4_ENABLED and IPV6_ENABLED:
                    print(f"| {key2.ljust(54, ' ')}|   {value2['IPv4']}   |  {value2['IPv6']['A']} | {value2['IPv6']['AAAA']} |")
                else:
                    print(f"| {key2.ljust(54, ' ')}|  {value2['IPv4']['A']} | {value2['IPv4']['AAAA']} |  {value2['IPv6']['A']} | {value2['IPv6']['AAAA']} |")
            print_section_footer()
    elif section == "CNAME":
        print_section_header(str(server) + " " + str(section), str(section))
        for key, value in data[server][section].items():
            if IPV4_ENABLED and not IPV6_ENABLED:
                print(f"| {key.ljust(54, ' ')}|     {value['IPv4']}     |   {value['IPv6']}   |")
            elif not IPV4_ENABLED and IPV6_ENABLED:
                print(f"| {key.ljust(54, ' ')}|   {value['IPv4']}   |     {value['IPv6']}     |")
            else:
                print(f"| {key.ljust(54, ' ')}|     {value['IPv4']}     |     {value['IPv6']}     |")
        print_section_footer()
    else:
        print_section_header(str(server) + " " + str(section), str(section))
        for key, value in data[server][section].items():
            if IPV4_ENABLED and not IPV6_ENABLED:
                print(f"| {key.ljust(54, ' ')}|  {value['IPv4']['A']} | {value['IPv4']['AAAA']} |   {value['IPv6']}   |")
            elif not IPV4_ENABLED and IPV6_ENABLED:
                print(f"| {key.ljust(54, ' ')}|   {value['IPv4']}   |  {value['IPv6']['A']} | {value['IPv6']['AAAA']} |")
            else:
                print(f"| {key.ljust(54, ' ')}|  {value['IPv4']['A']} | {value['IPv4']['AAAA']} |  {value['IPv6']['A']} | {value['IPv6']['AAAA']} |")
        print_section_footer()


def print_data(data):
    for key in DNS_SERVERS.keys():
        print_section(data, key, "Redirect")
        print_section(data, key, "Block")
        print_section(data, key, "CNAME")
        print_section(data, key, "Forward")


def main():
    global IPV4_ENABLED
    global IPV6_ENABLED

    clear_terminal()

    parser = argparse.ArgumentParser(
        description="Exploit Host Connectivity Checker",
        usage="%(prog)s [-h] [--disable-ipv4] [--enable-ipv6]"
    )
    parser.add_argument(
        "--disable-ipv4",
        action="store_false",
        help="Disable checking IPv4 servers. Default: True"
    )
    parser.add_argument(
        "--enable-ipv6",
        action="store_true",
        help="Enable checking IPv6 servers. Default: False"
    )
    args = parser.parse_args()

    IPV4_ENABLED = args.disable_ipv4
    IPV6_ENABLED = args.enable_ipv6

    if not IPV4_ENABLED and not IPV6_ENABLED:
        print("Must have either IPv4 or IPv6 enabled. Both are currently disabled.")
        sys.exit(1)

    if os.name == "nt":
        os.system("color")

    data = generate_data()
    clear_terminal()
    print_data(data)
    input("Press Enter to exit...")


if __name__ == "__main__":
    main()
